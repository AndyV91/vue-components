[
  {
    "component": "AppButton",
    "name": "Button",
    "files": [
      {
        "name": "AppButton.vue",
        "dir": "./src/modules/ui/components/app/buttons/app-button",
        "placementDir": "app/buttons",
        "type": "components",
        "content": "<script setup lang=\"ts\">\r\nimport { buttonVariants } from './appButtonVariants'\r\nimport type { ButtonProps } from './appButtonVariants'\r\nimport { fadeTransition } from '@/transitions'\r\n\r\ninterface Props {\r\n  isDisabled?: boolean\r\n  isLoading?: boolean\r\n  isReady?: boolean\r\n  variant?: ButtonProps['variant']\r\n  size?: ButtonProps['size']\r\n}\r\n\r\nconst {\r\n  variant = 'default',\r\n  size = 'default',\r\n  isDisabled = false,\r\n  isLoading = false,\r\n} = defineProps<Props>()\r\n\r\nconst emits = defineEmits(['component:click'])\r\n\r\nconst handleClick = (): void => {\r\n  if (!isDisabled && !isLoading)\r\n    emits('component:click')\r\n}\r\n</script>\r\n\r\n<template>\r\n  <!-- eslint-disable tailwindcss/no-custom-classname -->\r\n  <button\r\n    :class=\"buttonVariants({ variant, size })\" @click=\"handleClick\"\r\n  >\r\n    <div :class=\"{ 'opacity-30': isLoading }\" class=\"transition-opacity\">\r\n      <slot />\r\n    </div>\r\n    <Transition v-bind=\"fadeTransition\">\r\n      <div v-if=\"isLoading\" class=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2\">\r\n        <div class=\"relative inline-block h-2.5 w-10\">\r\n          <div\r\n            v-for=\"i in 4\" :key=\"i\" class=\"orb absolute top-[1px] h-2 w-2 rounded-full\" :class=\"{\r\n              'bg-white': variant === 'default',\r\n              'bg-primary-500': variant === 'secondary',\r\n            }\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </Transition>\r\n  </button>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n.orb:nth-child(1) {\r\n  left: 4px;\r\n  animation: lds-ellipsis1 0.6s infinite;\r\n}\r\n\r\n.orb:nth-child(2) {\r\n  left: 4px;\r\n  animation: lds-ellipsis2 0.6s infinite;\r\n}\r\n\r\n.orb:nth-child(3) {\r\n  left: 16px;\r\n  animation: lds-ellipsis2 0.6s infinite;\r\n}\r\n\r\n.orb:nth-child(4) {\r\n  left: 28px;\r\n  animation: lds-ellipsis3 0.6s infinite;\r\n}\r\n\r\n@keyframes lds-ellipsis1 {\r\n  0% {\r\n    transform: scale(0);\r\n  }\r\n\r\n  100% {\r\n    transform: scale(1);\r\n  }\r\n}\r\n\r\n@keyframes lds-ellipsis3 {\r\n  0% {\r\n    transform: scale(1);\r\n  }\r\n\r\n  100% {\r\n    transform: scale(0);\r\n  }\r\n}\r\n\r\n@keyframes lds-ellipsis2 {\r\n  0% {\r\n    transform: translate(0, 0);\r\n  }\r\n\r\n  100% {\r\n    transform: translate(12px, 0);\r\n  }\r\n}\r\n</style>\r\n"
      },
      {
        "name": "appButtonVariants.ts",
        "dir": "./src/modules/ui/components/app/buttons/app-button",
        "placementDir": "app/buttons",
        "type": "components",
        "content": "import type { VariantProps } from 'class-variance-authority'\r\nimport { cva } from 'class-variance-authority'\r\n\r\nexport const buttonVariants = cva(\r\n  'relative inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\r\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\r\n        outline: 'border border-input hover:bg-accent hover:text-accent-foreground',\r\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\r\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\r\n        link: 'text-primary underline-offset-4 hover:underline',\r\n      },\r\n      size: {\r\n        default: 'h-10 px-4 py-2',\r\n        sm: 'h-9 rounded-md px-3',\r\n        lg: 'h-11 rounded-md px-8',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n      size: 'default',\r\n    },\r\n  },\r\n)\r\nexport type ButtonProps = VariantProps<typeof buttonVariants>\r\n"
      }
    ],
    "dependencies": [
      "class-variance-authority"
    ]
  },
  {
    "component": "AppDropdownButton",
    "name": "DropdownButton",
    "files": [
      {
        "name": "AppDropdownButton.vue",
        "dir": "./src/modules/ui/components/app/buttons/app-dropdown-button",
        "placementDir": "app/buttons",
        "type": "components",
        "content": "<script setup lang=\"ts\">\r\nimport { Popover, PopoverButton, PopoverPanel } from '@headlessui/vue'\r\n\r\nimport { Float, FloatArrow } from '@headlessui-float/vue'\r\n\r\ninterface Props {\r\n  placement?: 'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end' | 'right' | 'right-start' | 'right-end'\r\n  transitionName?: string\r\n\r\n  hasArrow?: boolean\r\n  hasFlip?: boolean\r\n  hasShift?: boolean\r\n}\r\n\r\nwithDefaults(defineProps<Props>(), {\r\n  hasFlip: true,\r\n  hasShift: true,\r\n  placement: 'bottom-start',\r\n  transitionName: 'scale-bounce-transition',\r\n  hasArrow: false,\r\n})\r\n</script>\r\n\r\n<template>\r\n  <Popover>\r\n    <Float\r\n      :flip=\"hasFlip\"\r\n      :shift=\"hasShift\"\r\n      :placement=\"placement\"\r\n      :transition-name=\"transitionName\"\r\n      :arrow=\"hasArrow\"\r\n      :offset=\"hasArrow ? 15 : 4\"\r\n    >\r\n      <PopoverButton>\r\n        <slot name=\"button\" />\r\n      </PopoverButton>\r\n\r\n      <PopoverPanel v-slot=\"{ close }\">\r\n        <div v-if=\"hasArrow\" class=\"absolute -z-10 h-full w-full rounded bg-white shadow-main\" />\r\n\r\n        <FloatArrow v-if=\"hasArrow\" class=\"absolute -z-10 h-5 w-5 rotate-45 bg-white shadow-main\" />\r\n        <div class=\"z-50 flex flex-col gap-2 rounded bg-white p-2 shadow-main\">\r\n          <slot name=\"panel\" :close=\"close\" />\r\n        </div>\r\n      </PopoverPanel>\r\n    </Float>\r\n  </Popover>\r\n</template>\r\n"
      }
    ],
    "dependencies": [
      "@headlessui-float/vue",
      "@headlessui/vue"
    ],
    "internalDependencies": [
      "AppButton"
    ]
  },
  {
    "component": "FormError",
    "name": "FormError",
    "files": [
      {
        "name": "FormError.vue",
        "dir": "./src/modules/ui/components/forms/error",
        "placementDir": "forms/errors",
        "type": "components",
        "content": "<script setup lang=\"ts\">\r\ninterface Props {\r\n  errorMessage?: string\r\n}\r\nconst { errorMessage } = defineProps<Props>()\r\n</script>\r\n\r\n<template>\r\n  <p class=\"text-sm text-danger-500\">\r\n    <slot>\r\n      {{ errorMessage }}\r\n    </slot>\r\n  </p>\r\n</template>\r\n"
      }
    ]
  },
  {
    "component": "FormInputField",
    "name": "FormInputField",
    "files": [
      {
        "name": "FormInputField.vue",
        "dir": "./src/modules/ui/components/forms/field",
        "placementDir": "forms/field",
        "type": "components",
        "content": "<script setup lang=\"ts\" generic=\"TModel extends string | number | undefined\">\r\nimport { generateUuid } from '@/helpers/uuid/generateUuid'\r\nimport { useFormInputGroup } from '@/modules/ui/composables/forms/group/useFormInputGroup'\r\n\r\ninterface Props {\r\n  hasSuccess?: boolean\r\n  isReadOnly?: boolean\r\n  isDisabled?: boolean\r\n  isTouched?: boolean\r\n  isDirty?: boolean\r\n  placeholder?: string\r\n  unit?: string\r\n  type?: TModel extends number ? 'number' : 'text' | 'password' | 'email' | 'tel' | 'url' | 'search'\r\n  label?: string\r\n  errors?: { _errors: string[] }\r\n}\r\n\r\nconst {\r\n  hasSuccess = false,\r\n  isReadOnly = false,\r\n  isDisabled = false,\r\n  isTouched = false,\r\n  isDirty = false,\r\n  placeholder,\r\n  unit,\r\n  label,\r\n  errors = { _errors: [] },\r\n  type = 'text',\r\n} = defineProps<Props>()\r\n\r\nconst emits = defineEmits<{\r\n  blur: []\r\n}>()\r\n\r\nconst model = defineModel<TModel>()\r\n\r\nconst uuid = generateUuid()\r\nconst element = ref<HTMLElement>()\r\n\r\nconst slots = defineSlots<{\r\n  label?: (props: {}) => any\r\n  'front-content'?: (props: {}) => any\r\n  'back-content'?: (props: {}) => any\r\n}>()\r\n\r\nconst errorShown = computed(() => errors._errors.length > 0 && (isTouched || isDirty))\r\n\r\nconst borderColor = computed(() => {\r\n  if (errorShown.value)\r\n    return 'border-danger-500'\r\n  if (hasSuccess)\r\n    return 'border-success-500'\r\n  if (isReadOnly)\r\n    return 'border-gray-300'\r\n  return 'border-primary-500'\r\n})\r\n\r\n// Adds grouping logic if a wrapped in FormGroup component\r\nif (type === 'number')\r\n  useFormInputGroup({ model: model as Ref<number>, element, uuid, isDisabled: computed(() => isDisabled) })\r\n</script>\r\n\r\n<template>\r\n  <!-- eslint-disable vue/no-extra-parens -->\r\n  <div ref=\"element\">\r\n    <!-- Label -->\r\n    <FormLabel :for=\"uuid\">\r\n      <slot name=\"label\">\r\n        {{ label }}\r\n      </slot>\r\n    </FormLabel>\r\n\r\n    <div class=\"flex\">\r\n      <!-- Content before the input -->\r\n      <div v-if=\"slots['front-content']\" class=\"flex rounded rounded-r-none border bg-gray-200 px-4\" :class=\"borderColor\">\r\n        <slot name=\"front-content\" />\r\n      </div>\r\n\r\n      <!-- Input -->\r\n      <div\r\n        class=\"flex h-full rounded border\"\r\n        :class=\"[\r\n          borderColor,\r\n          {\r\n            'rounded-l-none border-l-0': slots['front-content'],\r\n            'rounded-r-none border-r-0': slots['back-content'],\r\n          },\r\n        ]\"\r\n      >\r\n        <input\r\n          :id=\"uuid\" v-model=\"model\" :disabled=\"isDisabled\" :type=\"(type as string)\" min=\"0\"\r\n          class=\"relative w-full rounded px-4 py-2 placeholder:transition-all placeholder:duration-300 focus:placeholder:translate-x-1 focus:placeholder:opacity-0\"\r\n          :placeholder=\"placeholder\" :readonly=\"isReadOnly\" @blur=\"emits('blur')\"\r\n        >\r\n\r\n        <div\r\n          v-if=\"unit\" :class=\"[borderColor, {\r\n            'rounded-r-none border-r-0': slots['back-content'],\r\n          }]\" class=\"flex min-w-max items-center rounded rounded-l-none border-l bg-white px-3 text-primary-500\"\r\n        >\r\n          {{ unit }}\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Content after the input -->\r\n      <div v-if=\"slots['back-content']\" class=\"flex rounded rounded-l-none border bg-gray-200 px-4\" :class=\"borderColor\">\r\n        <slot name=\"back-content\" />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Error -->\r\n    <TransitionExpand :duration=\"0.2\">\r\n      <FormError :error-message=\"errors._errors[0]\" />\r\n    </TransitionExpand>\r\n  </div>\r\n</template>\r\n"
      }
    ],
    "internalDependencies": [
      "FormError",
      "FormInputGroupComposable"
    ]
  },
  {
    "component": "FormInputGroupComposable",
    "name": "FormInputGroupComposable",
    "files": [
      {
        "name": "useFormInputGroup.ts",
        "dir": "./src/modules/ui/composables/forms/group",
        "placementDir": "forms/group",
        "type": "composables",
        "content": "import { useFormInputGroupContext } from '@/modules/ui/composables/forms/group/useFormInputGroupContext'\r\nimport type { Option } from '@/modules/ui/composables/forms/group/useFormInputGroupContext'\r\n\r\nexport interface UseFormInputGroupParams {\r\n  model: Ref<number | null>\r\n  isDisabled?: Ref<boolean>\r\n  uuid: string\r\n  element: Ref<HTMLElement | undefined>\r\n}\r\n\r\nexport const useFormInputGroup = ({ model, uuid, isDisabled, element }: UseFormInputGroupParams): void => {\r\n  const context = useFormInputGroupContext()\r\n  const propsRef = computed(() => ({\r\n    value: typeof model.value === 'number' ? model.value : 0,\r\n    disabled: isDisabled?.value,\r\n  }))\r\n  const option: Option = ref({ id: uuid, element: element.value, propsRef: propsRef.value }) as Option\r\n\r\n  const change = (value: number): void => {\r\n    if (isDisabled?.value || !context)\r\n      return\r\n\r\n    const newValue = context.change(option, value)\r\n    model.value = newValue\r\n  }\r\n\r\n  watch(\r\n    () => model.value, (value) => {\r\n      if (!value)\r\n        return\r\n      change(value)\r\n    },\r\n  )\r\n\r\n  onMounted(() => {\r\n    if (context)\r\n      context.registerOption(option)\r\n  })\r\n  onUnmounted(() => {\r\n    if (context)\r\n      context.unregisterOption(uuid)\r\n  })\r\n}\r\n"
      },
      {
        "name": "useFormInputGroupContext.ts",
        "dir": "./src/modules/ui/composables/forms/group",
        "placementDir": "forms/group",
        "type": "composables",
        "content": "import { inject } from 'vue'\r\nimport type { ComputedRef, InjectionKey, Ref } from 'vue'\r\n\r\nexport type Option = Ref<{ id: string; element: HTMLElement | undefined; propsRef: { value: number; disabled: boolean } }>\r\n\r\nexport interface FormInputGroupStateDefinition {\r\n  // State\r\n  valueMeasurement?: ComputedRef<string>\r\n  percentProgress?: ComputedRef<boolean>\r\n  valueProgress?: ComputedRef<boolean>\r\n  maxLabel?: ComputedRef<boolean>\r\n\r\n  options: Ref<Option[]>\r\n  maxValue: ComputedRef<number | undefined>\r\n  valueUsed: ComputedRef<number>\r\n\r\n  disabled: Ref<boolean>\r\n  change(option: Option, newValue: number): number | null\r\n  registerOption(action: Option): void\r\n  unregisterOption(id: string): void\r\n}\r\n\r\nexport const FormInputGroupContext = Symbol('FormGroupContext') as InjectionKey<FormInputGroupStateDefinition>\r\n\r\nexport const useFormInputGroupContext = (): FormInputGroupStateDefinition | null => {\r\n  const context = inject(FormInputGroupContext, null)\r\n  return context\r\n}\r\n"
      }
    ]
  },
  {
    "component": "AppTooltip",
    "name": "Tooltip",
    "files": [
      {
        "name": "AppTooltip.vue",
        "dir": "./src/modules/ui/components/app/tooltip",
        "placementDir": "app/tooltip",
        "type": "components",
        "content": "<script setup lang=\"ts\">\r\nimport {\r\n  onMounted,\r\n  ref,\r\n} from 'vue'\r\n\r\nimport type { Middleware } from '@floating-ui/dom'\r\nimport {\r\n  computePosition,\r\n  flip,\r\n  offset,\r\n  shift,\r\n} from '@floating-ui/dom'\r\nimport { useMouseInElement, watchDebounced } from '@vueuse/core'\r\nimport { scaleBounceTransition } from '@/transitions'\r\n\r\ninterface SlotEvents {\r\n  onBlur: () => void\r\n  onFocus: () => void\r\n  onKeydown: (event: KeyboardEvent) => void\r\n}\r\n\r\ninterface Props {\r\n  offset: number\r\n  hasNoFlip: boolean\r\n  hasNoShift: boolean\r\n  placement: 'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end' | 'right' | 'right-start' | 'right-end'\r\n}\r\n\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  offset: 12,\r\n  hasNoFlip: false,\r\n  hasNoShift: false,\r\n  placement: 'bottom',\r\n})\r\n\r\ndefineSlots<{\r\n  element: (props: { events: SlotEvents }) => any\r\n  tooltip: (props: {}) => any\r\n}>()\r\n\r\nconst tooltipSlot = ref()\r\nconst element = ref<HTMLElement>()\r\nconst tooltip = ref<HTMLElement>()\r\nconst tooltipWrapper = ref<HTMLElement>()\r\n\r\nconst { isOutside: tooltipWrapperOutside } = useMouseInElement(tooltipWrapper)\r\nconst { isOutside: tooltipOutside } = useMouseInElement(tooltip)\r\n\r\nconst update = (): void => {\r\n  if (!element.value || !tooltip.value)\r\n    return\r\n\r\n  const middleware: Middleware[] = []\r\n\r\n  if (props.offset)\r\n    middleware.push(offset(props.offset))\r\n\r\n  if (!props.hasNoFlip)\r\n    middleware.push(flip())\r\n\r\n  if (!props.hasNoShift)\r\n    middleware.push(shift())\r\n\r\n  computePosition(element.value, tooltip.value, {\r\n    placement: props.placement,\r\n    middleware,\r\n  }).then(({ x, y }) => {\r\n    if (!tooltip.value)\r\n      return\r\n    Object.assign(tooltip.value.style, {\r\n      left: `${x}px`,\r\n      top: `${y}px`,\r\n    })\r\n  })\r\n}\r\nconst tooltipShow = ref(false)\r\nconst showTooltip = (): void => {\r\n  tooltipShow.value = true\r\n\r\n  nextTick(() => {\r\n    update()\r\n  })\r\n}\r\n\r\nconst hideTooltip = (): void => {\r\n  if (tooltipOutside.value && tooltipWrapperOutside.value)\r\n    tooltipShow.value = false\r\n}\r\n\r\nonMounted(() => {\r\n  hideTooltip();\r\n  ([\r\n    ['focus', showTooltip],\r\n    ['blur', hideTooltip],\r\n  ] as const).forEach(([event, listener]) => {\r\n    if (!element.value)\r\n      return\r\n    element.value.addEventListener(event, listener)\r\n  })\r\n})\r\n\r\nconst handleEscape = (event: KeyboardEvent): void => {\r\n  if (event.key === 'Escape')\r\n    hideTooltip()\r\n}\r\n\r\nwatchDebounced(() => [tooltipOutside.value, tooltipWrapperOutside.value], () => {\r\n  hideTooltip()\r\n}, { debounce: 200, maxWait: 1000 })\r\n\r\nwatch(() => [tooltipOutside.value, tooltipWrapperOutside.value], () => {\r\n  if (!tooltipOutside.value || !tooltipWrapperOutside.value)\r\n    showTooltip()\r\n})\r\n\r\nconst slotEvents = {\r\n  onBlur: hideTooltip,\r\n  onFocus: showTooltip,\r\n  onKeydown: handleEscape,\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div ref=\"tooltipWrapper\" class=\"relative max-w-max\">\r\n    <div ref=\"element\" class=\"grid max-w-max place-items-center\">\r\n      <slot name=\"element\" :events=\"slotEvents\" />\r\n    </div>\r\n    <Teleport to=\"body\">\r\n      <Transition v-bind=\"scaleBounceTransition\">\r\n        <div v-if=\"tooltipShow\" id=\"tooltip\" ref=\"tooltip\" role=\"tooltip\"\r\n          :class=\"[tooltipSlot?.childElementCount === 0 ? 'opacity-0' : 'opacity-100']\"\r\n          class=\"absolute z-50 flex min-w-max rounded text-black shadow-main\">\r\n          <div ref=\"tooltipSlot\" class=\"flex w-full max-w-[60ch] flex-col items-center justify-center\">\r\n            <slot name=\"tooltip\" />\r\n          </div>\r\n        </div>\r\n      </Transition>\r\n    </Teleport>\r\n  </div>\r\n</template>\r\n"
      }
    ],
    "dependencies": [
      "@floating-ui/dom",
      "@vueuse/core"
    ]
  }
]