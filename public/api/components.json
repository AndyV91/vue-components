[
  {
    "component": "AppButton",
    "name": "Button",
    "files": [
      {
        "name": "AppButton.vue",
        "dir": "./src/modules/ui/components/app/buttons/app-button",
        "placementDir": "app/buttons",
        "type": "component",
        "content": "<script setup lang=\"ts\">\nimport { fadeTransition } from '@/transitions'\n\ninterface Props {\n  isDisabled?: boolean\n  isLoading?: boolean\n  isReady?: boolean\n  variant?: 'primary' | 'secondary'\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  isDisabled: false,\n  isLoading: false,\n  isReady: false,\n  variant: 'primary',\n})\n\nconst emits = defineEmits(['component:click'])\n\nconst { isDisabled, isLoading } = toRefs(props)\n\nconst handleClick = (): void => {\n  if (!isDisabled.value && !isLoading.value)\n    emits('component:click')\n}\n</script>\n\n<template>\n  <!-- eslint-disable tailwindcss/no-custom-classname -->\n  <button\n    class=\"relative overflow-hidden whitespace-nowrap rounded border px-3 py-2 transition duration-200 hover:shadow-main md:px-8\"\n    :class=\"{\n      'cursor-not-allowed bg-opacity-70': isDisabled || isLoading,\n      'border border-transparent bg-primary-500 text-white': variant === 'primary',\n      'border border-primary-500 bg-white text-primary-500': variant === 'secondary',\n    }\" @click=\"handleClick\"\n  >\n    <div :class=\"{ 'opacity-30': isLoading }\" class=\"transition-opacity\">\n      <slot />\n      <!-- <Transition>\n        <div\n          v-if=\"isReady\"\n          :class=\"[isReady ? 'opacity-100' : 'opacity-0']\"\n          class=\"text-secondary-500\"\n        >\n          <svg width=\"17\" height=\"13\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path\n              stroke=\"currentColor\"\n              fill=\"currentColor\"\n              d=\"M15.438 0a1.505 1.505 0 0 0-1.042.474c-2.937 3-5.616 5.95-8.453 8.895L2.465 6.54a1.5 1.5 0 0 0-2.133.242A1.566 1.566 0 0 0 .57 8.954l4.55 3.709c.603.49 1.472.44 2.018-.116 3.266-3.336 6.198-6.619 9.4-9.89.45-.443.587-1.124.344-1.712A1.515 1.515 0 0 0 15.438 0Z\"\n              fill-rule=\"nonzero\"\n            />\n          </svg>\n        </div>\n      </Transition> -->\n    </div>\n    <Transition v-bind=\"fadeTransition\">\n      <div v-if=\"isLoading\" class=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2\">\n        <div class=\"relative inline-block h-2.5 w-10\">\n          <div\n            v-for=\"i in 4\" :key=\"i\" class=\"orb absolute top-[1px] h-2 w-2 rounded-full\" :class=\"{\n              'bg-white': variant === 'primary',\n              'bg-primary-500': variant === 'secondary',\n            }\"\n          />\n        </div>\n      </div>\n    </Transition>\n  </button>\n</template>\n\n<style lang=\"scss\" scoped>\n.orb:nth-child(1) {\n  left: 4px;\n  animation: lds-ellipsis1 0.6s infinite;\n}\n\n.orb:nth-child(2) {\n  left: 4px;\n  animation: lds-ellipsis2 0.6s infinite;\n}\n\n.orb:nth-child(3) {\n  left: 16px;\n  animation: lds-ellipsis2 0.6s infinite;\n}\n\n.orb:nth-child(4) {\n  left: 28px;\n  animation: lds-ellipsis3 0.6s infinite;\n}\n\n@keyframes lds-ellipsis1 {\n  0% {\n    transform: scale(0);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n}\n\n@keyframes lds-ellipsis3 {\n  0% {\n    transform: scale(1);\n  }\n\n  100% {\n    transform: scale(0);\n  }\n}\n\n@keyframes lds-ellipsis2 {\n  0% {\n    transform: translate(0, 0);\n  }\n\n  100% {\n    transform: translate(12px, 0);\n  }\n}\n</style>\n"
      }
    ],
    "dependencies": []
  },
  {
    "component": "AppDropdownButton",
    "name": "DropdownButton",
    "files": [
      {
        "name": "AppDropdownButton.vue",
        "dir": "./src/modules/ui/components/app/buttons/app-dropdown-button",
        "placementDir": "app/buttons",
        "type": "component",
        "content": "<script setup lang=\"ts\">\nimport { Popover, PopoverButton, PopoverPanel } from '@headlessui/vue'\n\nimport { Float, FloatArrow } from '@headlessui-float/vue'\n\ninterface Props {\n  placement?: 'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end' | 'right' | 'right-start' | 'right-end'\n  transitionName?: string\n\n  hasArrow?: boolean\n  hasFlip?: boolean\n  hasShift?: boolean\n}\n\nwithDefaults(defineProps<Props>(), {\n  hasFlip: true,\n  hasShift: true,\n  placement: 'bottom-start',\n  transitionName: 'scale-bounce-transition',\n  hasArrow: false,\n})\n</script>\n\n<template>\n  <Popover>\n    <Float\n      :flip=\"hasFlip\"\n      :shift=\"hasShift\"\n      :placement=\"placement\"\n      :transition-name=\"transitionName\"\n      :arrow=\"hasArrow\"\n      :offset=\"hasArrow ? 15 : 4\"\n    >\n      <PopoverButton>\n        <slot name=\"button\" />\n      </PopoverButton>\n\n      <PopoverPanel v-slot=\"{ close }\">\n        <div v-if=\"hasArrow\" class=\"absolute -z-10 h-full w-full rounded bg-white shadow-main\" />\n\n        <FloatArrow v-if=\"hasArrow\" class=\"absolute -z-10 h-5 w-5 rotate-45 bg-white shadow-main\" />\n        <div class=\"z-50 flex flex-col gap-2 rounded bg-white p-2 shadow-main\">\n          <slot name=\"panel\" :close=\"close\" />\n        </div>\n      </PopoverPanel>\n    </Float>\n  </Popover>\n</template>\n"
      },
      {
        "name": "AppButton.vue",
        "dir": "./src/modules/ui/components/app/buttons/app-button",
        "placementDir": "app/buttons",
        "type": "component",
        "content": "<script setup lang=\"ts\">\nimport { fadeTransition } from '@/transitions'\n\ninterface Props {\n  isDisabled?: boolean\n  isLoading?: boolean\n  isReady?: boolean\n  variant?: 'primary' | 'secondary'\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  isDisabled: false,\n  isLoading: false,\n  isReady: false,\n  variant: 'primary',\n})\n\nconst emits = defineEmits(['component:click'])\n\nconst { isDisabled, isLoading } = toRefs(props)\n\nconst handleClick = (): void => {\n  if (!isDisabled.value && !isLoading.value)\n    emits('component:click')\n}\n</script>\n\n<template>\n  <!-- eslint-disable tailwindcss/no-custom-classname -->\n  <button\n    class=\"relative overflow-hidden whitespace-nowrap rounded border px-3 py-2 transition duration-200 hover:shadow-main md:px-8\"\n    :class=\"{\n      'cursor-not-allowed bg-opacity-70': isDisabled || isLoading,\n      'border border-transparent bg-primary-500 text-white': variant === 'primary',\n      'border border-primary-500 bg-white text-primary-500': variant === 'secondary',\n    }\" @click=\"handleClick\"\n  >\n    <div :class=\"{ 'opacity-30': isLoading }\" class=\"transition-opacity\">\n      <slot />\n      <!-- <Transition>\n        <div\n          v-if=\"isReady\"\n          :class=\"[isReady ? 'opacity-100' : 'opacity-0']\"\n          class=\"text-secondary-500\"\n        >\n          <svg width=\"17\" height=\"13\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path\n              stroke=\"currentColor\"\n              fill=\"currentColor\"\n              d=\"M15.438 0a1.505 1.505 0 0 0-1.042.474c-2.937 3-5.616 5.95-8.453 8.895L2.465 6.54a1.5 1.5 0 0 0-2.133.242A1.566 1.566 0 0 0 .57 8.954l4.55 3.709c.603.49 1.472.44 2.018-.116 3.266-3.336 6.198-6.619 9.4-9.89.45-.443.587-1.124.344-1.712A1.515 1.515 0 0 0 15.438 0Z\"\n              fill-rule=\"nonzero\"\n            />\n          </svg>\n        </div>\n      </Transition> -->\n    </div>\n    <Transition v-bind=\"fadeTransition\">\n      <div v-if=\"isLoading\" class=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2\">\n        <div class=\"relative inline-block h-2.5 w-10\">\n          <div\n            v-for=\"i in 4\" :key=\"i\" class=\"orb absolute top-[1px] h-2 w-2 rounded-full\" :class=\"{\n              'bg-white': variant === 'primary',\n              'bg-primary-500': variant === 'secondary',\n            }\"\n          />\n        </div>\n      </div>\n    </Transition>\n  </button>\n</template>\n\n<style lang=\"scss\" scoped>\n.orb:nth-child(1) {\n  left: 4px;\n  animation: lds-ellipsis1 0.6s infinite;\n}\n\n.orb:nth-child(2) {\n  left: 4px;\n  animation: lds-ellipsis2 0.6s infinite;\n}\n\n.orb:nth-child(3) {\n  left: 16px;\n  animation: lds-ellipsis2 0.6s infinite;\n}\n\n.orb:nth-child(4) {\n  left: 28px;\n  animation: lds-ellipsis3 0.6s infinite;\n}\n\n@keyframes lds-ellipsis1 {\n  0% {\n    transform: scale(0);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n}\n\n@keyframes lds-ellipsis3 {\n  0% {\n    transform: scale(1);\n  }\n\n  100% {\n    transform: scale(0);\n  }\n}\n\n@keyframes lds-ellipsis2 {\n  0% {\n    transform: translate(0, 0);\n  }\n\n  100% {\n    transform: translate(12px, 0);\n  }\n}\n</style>\n"
      }
    ],
    "dependencies": [
      "@headlessui-float/vue",
      "@headlessui/vue"
    ]
  },
  {
    "component": "AppTooltip",
    "name": "Tooltip",
    "files": [
      {
        "name": "AppTooltip.vue",
        "dir": "./src/modules/ui/components/app/tooltip",
        "placementDir": "app/tooltip",
        "type": "component",
        "content": "<script setup lang=\"ts\">\nimport {\n  onMounted,\n  ref,\n} from 'vue'\n\nimport type { Middleware } from '@floating-ui/dom'\nimport {\n  computePosition,\n  flip,\n  offset,\n  shift,\n} from '@floating-ui/dom'\nimport { useMouseInElement, watchDebounced } from '@vueuse/core'\nimport { scaleBounceTransition } from '@/transitions'\n\ninterface SlotEvents {\n  onBlur: () => void\n  onFocus: () => void\n  onKeydown: (event: KeyboardEvent) => void\n}\n\ninterface Props {\n  offset: number\n  hasNoFlip: boolean\n  hasNoShift: boolean\n  placement: 'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end' | 'right' | 'right-start' | 'right-end'\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  offset: 12,\n  hasNoFlip: false,\n  hasNoShift: false,\n  placement: 'bottom',\n})\n\ndefineSlots<{\n  element: (props: { events: SlotEvents }) => any\n  tooltip: (props: {}) => any\n}>()\n\nconst tooltipSlot = ref()\nconst element = ref<HTMLElement>()\nconst tooltip = ref<HTMLElement>()\nconst tooltipWrapper = ref<HTMLElement>()\n\nconst { isOutside: tooltipWrapperOutside } = useMouseInElement(tooltipWrapper)\nconst { isOutside: tooltipOutside } = useMouseInElement(tooltip)\n\nconst update = (): void => {\n  if (!element.value || !tooltip.value)\n    return\n\n  const middleware: Middleware[] = []\n\n  if (props.offset)\n    middleware.push(offset(props.offset))\n\n  if (!props.hasNoFlip)\n    middleware.push(flip())\n\n  if (!props.hasNoShift)\n    middleware.push(shift())\n\n  computePosition(element.value, tooltip.value, {\n    placement: props.placement,\n    middleware,\n  }).then(({ x, y }) => {\n    if (!tooltip.value)\n      return\n    Object.assign(tooltip.value.style, {\n      left: `${x}px`,\n      top: `${y}px`,\n    })\n  })\n}\nconst tooltipShow = ref(false)\nconst showTooltip = (): void => {\n  tooltipShow.value = true\n\n  nextTick(() => {\n    update()\n  })\n}\n\nconst hideTooltip = (): void => {\n  if (tooltipOutside.value && tooltipWrapperOutside.value)\n    tooltipShow.value = false\n}\n\nonMounted(() => {\n  hideTooltip();\n  ([\n    ['focus', showTooltip],\n    ['blur', hideTooltip],\n  ] as const).forEach(([event, listener]) => {\n    if (!element.value)\n      return\n    element.value.addEventListener(event, listener)\n  })\n})\n\nconst handleEscape = (event: KeyboardEvent): void => {\n  if (event.key === 'Escape')\n    hideTooltip()\n}\n\nwatchDebounced(() => [tooltipOutside.value, tooltipWrapperOutside.value], () => {\n  hideTooltip()\n}, { debounce: 200, maxWait: 1000 })\n\nwatch(() => [tooltipOutside.value, tooltipWrapperOutside.value], () => {\n  if (!tooltipOutside.value || !tooltipWrapperOutside.value)\n    showTooltip()\n})\n\nconst slotEvents = {\n  onBlur: hideTooltip,\n  onFocus: showTooltip,\n  onKeydown: handleEscape,\n}\n</script>\n\n<template>\n  <div ref=\"tooltipWrapper\" class=\"relative max-w-max\">\n    <div ref=\"element\" class=\"grid max-w-max place-items-center\">\n      <slot name=\"element\" :events=\"slotEvents\" />\n    </div>\n    <Teleport to=\"body\">\n      <Transition v-bind=\"scaleBounceTransition\">\n        <div v-if=\"tooltipShow\" id=\"tooltip\" ref=\"tooltip\" role=\"tooltip\"\n          :class=\"[tooltipSlot?.childElementCount === 0 ? 'opacity-0' : 'opacity-100']\"\n          class=\"absolute z-50 flex min-w-max rounded text-black shadow-main\">\n          <div ref=\"tooltipSlot\" class=\"flex w-full max-w-[60ch] flex-col items-center justify-center\">\n            <slot name=\"tooltip\" />\n          </div>\n        </div>\n      </Transition>\n    </Teleport>\n  </div>\n</template>\n"
      }
    ],
    "dependencies": [
      "@floating-ui/dom",
      "@vueuse/core"
    ]
  }
]